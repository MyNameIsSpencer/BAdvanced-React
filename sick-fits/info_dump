return (
  <Container>
    // <ApolloProvider client={this.props.apollo}>    //   <<< without destructuring
    <ApolloProvider client={apollo}>
      <Page>
        <Component {...pageProps}/>
      </Page>
    </ApolloClient>
  </Container>




  type Item {
    id: ID! @unique
    title: String!
    description: String!
    image: String
    largeImage: String
    price: Int!
    user: User!
    # createAt: DateTime!   << Don't need, there by default
    # updatedAt: DateTime!   << Don't need, there by default
  }





  import React, { Component } from 'react';
  import { Mutation } from 'react-apollo';
  import gql from 'graphql-tag';
  import Router from 'next/router';
  import Form from './styles/Form';
  import formatMoney from '../lib/formatMoney';
  import Error from './ErrorMessage';

  const CREATE_ITEM_MUTATION = gql`
    mutation CREATE_ITEM_MUTATION(
      $title: String!
      $description: String!
      $price: Int!
      $image: String
      $largeImage: String
    ) {
      createItem(
        title: $title
        description: $description
        price: $price
        image: $image
        largeImage: $largeImage
      ) {
        id
      }
    }
  `;

  class CreateItem extends Component {
    state = {
      title: '',
      description: '',
      image: '',
      largeImage: '',
      price: 0,
    };
    handleChange = e => {
      const { name, type, value } = e.target;
      const val = type === 'number' ? parseFloat(value) : value;
      this.setState({ [name]: val });
    };

    uploadFile = async e => {
      const files = e.target.files;
      const data = new FormData();
      data.append('file', files[0]);
      data.append('upload_preset', 'sickfits');

      const res = await fetch('https://api.cloudinary.com/v1_1/wesbostutorial/image/upload', {
        method: 'POST',
        body: data,
      });
      const file = await res.json();
      this.setState({
        image: file.secure_url,
        largeImage: file.eager[0].secure_url,
      });
    };
    render() {
      return (
        <Mutation mutation={CREATE_ITEM_MUTATION} variables={this.state}>
          {(createItem, { loading, error }) => (
            <Form
              data-test="form"
              onSubmit={async e => {
                // Stop the form from submitting
                e.preventDefault();
                // call the mutation
                const res = await createItem();
                // change them to the single item page
                console.log(res);
                Router.push({
                  pathname: '/item',
                  query: { id: res.data.createItem.id },
                });
              }}
            >
              <Error error={error} />
              <fieldset disabled={loading} aria-busy={loading}>
                <label htmlFor="file">
                  Image
                  <input
                    type="file"
                    id="file"
                    name="file"
                    placeholder="Upload an image"
                    required
                    onChange={this.uploadFile}
                  />
                  {this.state.image && (
                    <img width="200" src={this.state.image} alt="Upload Preview" />
                  )}
                </label>

                <label htmlFor="title">
                  Title
                  <input
                    type="text"
                    id="title"
                    name="title"
                    placeholder="Title"
                    required
                    value={this.state.title}
                    onChange={this.handleChange}
                  />
                </label>

                <label htmlFor="price">
                  Price
                  <input
                    type="number"
                    id="price"
                    name="price"
                    placeholder="Price"
                    required
                    value={this.state.price}
                    onChange={this.handleChange}
                  />
                </label>

                <label htmlFor="description">
                  Description
                  <textarea
                    id="description"
                    name="description"
                    placeholder="Enter A Description"
                    required
                    value={this.state.description}
                    onChange={this.handleChange}
                  />
                </label>
                <button type="submit">Submit</button>
              </fieldset>
            </Form>
          )}
        </Mutation>
      );
    }
  }

  export default CreateItem;
  export { CREATE_ITEM_MUTATION };











  updateItem(parent, args, ctx, info) {
    // first take a copy of the updates
    const updates = { ...args };
    // remove the ID from the updates
    delete updates.id;

    // run the update method;  db is how we expose the prisma database;
    // mutation gives access to all mutations in prisma.graphql Mutations object
    // Looking at prisma.graphql, updateItem takes (data: ItemUPdateInput!, where: ItemWhereUniqueInput!): Item
    return ctx.db.mutation.updateItem(







Query.js



// const { forwardTo } = require('prisma-binding');
// const { hasPermission } = require('../utils');
//
// const Query = {
//   items: forwardTo('db'),
//   item: forwardTo('db'),
//   itemsConnection: forwardTo('db'),
//   me(parent, args, ctx, info) {
//     // check if there is a current user ID
//     if (!ctx.request.userId) {
//       return null;
//     }
//     return ctx.db.query.user(
//       {
//         where: { id: ctx.request.userId },
//       },
//       info
//     );
//   },
//   async users(parent, args, ctx, info) {
//     // 1. Check if they are logged in
//     if (!ctx.request.userId) {
//       throw new Error('You must be logged in!');
//     }
//     console.log(ctx.request.userId);
//     // 2. Check if the user has the permissions to query all the users
//     hasPermission(ctx.request.user, ['ADMIN', 'PERMISSIONUPDATE']);
//
//     // 2. if they do, query all the users!
//     return ctx.db.query.users({}, info);
//   },
// };
//
// module.exports = Query;




Pagination
// import React from 'react';
// import PaginationStyles from './styles/PaginationStyles';
//
// const Pagination = props => (
//   <PaginationStyles>
//     <p>Welcome to pagination!</p>
//   </PaginationStyles>
// )
//
// export default Pagination;
//
//





requestreset test
test('calls the mutation', async () => {
  const wrapper = mount(
    <MockedProvider mocks={mocks}>
      <RequestReset />
    </MockedProvider>
  );
  // simulate typing an email
  wrapper.find('input').simulate('change', { target: { name: 'email', value: 'wesbos@gmail.com' }});
  // submit the form
  wrapper.find('form').simulate('submit');
  await wait();
  wrapper.update();
  console.log(wrapper);
  expect(wrapper.find('p').text()).toContain('Success! Check your email for a reset link!');
});
